<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="Zustandsautomat" Id="{06aab81e-e47c-4303-86d6-ad89b6118069}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'reflection'} 
FUNCTION_BLOCK Zustandsautomat IMPLEMENTS InterfaceVisuZustandsautomat
VAR CONSTANT
	MaxProducts	: UINT := 5;
END_VAR
VAR_INPUT
	Panel			: REFERENCE TO ST_Panel;
END_VAR
VAR
  State            : E_States;
  Products         : UINT := MaxProducts;
  trigButton         : R_TRIG;
  trigInsertCoin     : R_TRIG;
  trigTakeProduct    : R_TRIG;
  trigTakeCoin       : R_TRIG;


	NeuInit						: BOOL;
//only for VISU
	{attribute 'instance-path'} 
	{attribute 'no_init'} 
	InstanzZustandsautomat		: STRING(255);
 	InstanzNameZustandsautomat	: STRING(255);
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[Init();
stateMachine();
conditions();


]]></ST>
    </Implementation>
    <Method Name="conditions" Id="{737e76b9-6c29-4c2e-9f69-c3f0986c32ce}">
      <Declaration><![CDATA[METHOD conditions : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Panel.NumberOfProducts := Products;
Panel.State := TO_STRING(State);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init" Id="{e23b1f8a-7b01-4887-ad95-8a9f68570603}">
      <Declaration><![CDATA[METHOD Init : BOOL
VAR_INPUT
END_VAR
VAR
	tempName	: STRING(255);
	nDotFound	: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF NOT NeuInit THEN
	NeuInit:=TRUE;

	tempName:=InstanzZustandsautomat;
	nDotFound:=FIND(tempName,'.');
	WHILE nDotFound <> 0 DO
		tempName := RIGHT(tempName, LEN(tempName)-nDotFound);
		nDotFound := Tc2_Standard.FIND(tempName, '.');
	END_WHILE

	InstanzNameZustandsautomat := tempName;
	Panel.InstanzName:=InstanzNameZustandsautomat;
	
	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="Prop_Panel" Id="{847c6b85-cb6c-4e8f-82ff-35ee89a15574}">
      <Declaration><![CDATA[PROPERTY Prop_Panel : Pointer to ST_Panel]]></Declaration>
      <Get Name="Get" Id="{43275fb5-8acd-48eb-8656-43155b0901e4}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Prop_Panel:=ADR(Panel);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="stateMachine" Id="{60b1a753-bb52-4aa5-b91b-89874d07573b}">
      <Declaration><![CDATA[METHOD stateMachine : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[trigButton(CLK := Panel.Button);
trigInsertCoin(CLK := Panel.InsertCoin);
trigTakeProduct(CLK := Panel.TakeProduct);
trigTakeCoin(CLK := Panel.TakeCoin);
 
CASE State OF
  E_States.Waiting:
    IF (trigButton.Q) THEN
      ; // keep in the state
    END_IF
    IF (trigInsertCoin.Q) THEN
      ADSLOGSTR(ADSLOG_MSGTYPE_HINT, 'Customer has insert a coin.', '');
      State := E_States.HasCoin;
    END_IF
 
  E_States.HasCoin:
    IF (trigButton.Q) THEN
      IF (Products > 0) THEN
        Products := Products - 1;
        ADSLOGSTR(ADSLOG_MSGTYPE_HINT, 'Customer has pressed the button. Output product.', '');
        State := E_States.ProductEjected;
      ELSE
        ADSLOGSTR(ADSLOG_MSGTYPE_HINT, 'Customer has pressed the button. No more products. Return coin.', '');
        State := E_States.CoinEjected;
      END_IF
    END_IF
 
  E_States.ProductEjected:
    IF (trigTakeProduct.Q) THEN
      ADSLOGSTR(ADSLOG_MSGTYPE_HINT, 'Customer has taken the product.', '');
      State := E_States.Waiting;
    END_IF
 
  E_States.CoinEjected:
    IF (trigTakeCoin.Q) THEN
      ADSLOGSTR(ADSLOG_MSGTYPE_HINT, 'Customer has taken the coin.', '');
      State := E_States.Waiting;
    END_IF
 
  ELSE
    ADSLOGSTR(ADSLOG_MSGTYPE_ERROR, 'Invalid state', '');
    State := E_States.Waiting;
END_CASE
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>